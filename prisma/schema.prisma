generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("SUPABASE_URL")
  directUrl = env("SUPABASE_DIRECT_URL")
}

model Post {
  id        Int      @id @default(autoincrement())
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  createdBy   User   @relation(fields: [createdById], references: [id])
  createdById String

  @@index([name])
}

model Account {
  id                       String  @id @default(cuid())
  userId                   String
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String? // @db.Text
  access_token             String? // @db.Text
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String? // @db.Text
  session_state            String?
  user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  refresh_token_expires_in Int?

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  phone         String?

  accounts  Account[]
  sessions  Session[]
  posts     Post[]
  addresses Address[]
  payments  Payment[]

  reviews Review[]
  Cart    Cart?
}

model Address {
  id         String  @id @default(cuid())
  line1      String
  line2      String?
  city       String
  state      String
  country    String
  postalCode String
  userId     String

  User User @relation(fields: [userId], references: [id])

  @@index([userId])
}

model Payment {
  id       String   @id @default(cuid())
  provider String
  acc_no   BigInt
  expires  DateTime
  userId   String

  User User @relation(fields: [userId], references: [id])

  @@index([userId])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Cart {
  id     String @id @default(cuid())
  userId String @unique
  amount Float

  products Product[]
  user     User      @relation(fields: [userId], references: [id])
}

model Product {
  id    String  @id @default(cuid())
  name  String
  img   String?
  price Float
  fit   Fit     @default(Unisex)
  size  Size    @default(M)
  stock Int     @default(1)
  desc  String?

  reviews Review[]
  carts   Cart[]
}

model Review {
  id        String  @id @default(cuid())
  rating    Int
  text      String?
  userId    String
  productId String

  User    User    @relation(fields: [userId], references: [id])
  Product Product @relation(fields: [productId], references: [id])

  @@index([productId])
}

enum Fit {
  Kids
  Men
  Women
  Unisex
}

enum Size {
  XS
  S
  M
  L
  XL
}
